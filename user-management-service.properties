server.port=8765
spring.application.name=user-management-service
#spring.config.import=optional:configserver:http://localhost:8760/
spring.config.import=optional:configserver:http://cloud-config-service:8760
#eureka.client.serviceUrl.defaultZone  = http://localhost:8761/eureka
eureka.client.serviceUrl.defaultZone  = http://eureka-server:8761/eureka
eureka.client.instance.preferIpAddress = true
eureka.client.fetchRegistry=true

#Actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.diskspace.enabled=true

management.health.circuitbreakers.enabled=true
management.health.ratelimiters.enabled=true

management.metrics.tags.application=${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles-histogram.resilience4j.circuitbreaker.calls=true

info.name=${spring.application.name}
info.description=User management service
info.environment=${spring.profiles.active}
info.version=0.0.1
    
#Resilence4j retry configuration
#The maximum number of attempts (including the initial call as the first attempt), default 3 attempts
resilience4j.retry.instances.RetryInstance.maxRetryAttempts=5
#A fixed wait duration between retry attempts, default 500 [ms]	
resilience4j.retry.instances.RetryInstance.waitDuration=2s
#Randomized Interval
#resilience4j.retry.instances.RetryInstance.enableRandomizedWait=true
#resilience4j.retry.instances.RetryInstance.randomizedWaitFactor=0.5
#Exponential Interval
resilience4j.retry.instances.RetryInstance.enableExponentialBackoff=true
resilience4j.retry.instances.RetryInstance.exponentialBackoffMultiplier=2

#Resilence4j circuit breaker configuration
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
#Configures the size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
#Configures the minimum number of calls which are required (per sliding window period) before the CircuitBreaker can calculate the error rate or slow call rate.
#For example, if minimumNumberOfCalls is 10, then at least 10 calls must be recorded, before the failure rate can be calculated.
#If only 9 calls have been recorded the CircuitBreaker will not transition to open even if all 9 calls have failed
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls=100
#If the sliding window is TIME_BASED, the calls of the last slidingWindowSize seconds recorded and aggregated.
resilience4j.circuitbreaker.configs.default.slidingWindowType=TIME_BASED
#Configures the number of permitted calls when the CircuitBreaker is half open.
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true
#The time that the CircuitBreaker should wait before transitioning from open to half-open.
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=60000
#Configures the failure rate threshold in percentage. When the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls.
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
#The size of a event consumer buffer, The emitted CircuitBreaker events are stored in a separate circular event consumer buffers
resilience4j.circuitbreaker.configs.default.eventConsumerBufferSize=100
#A list of exceptions that are recorded as a failure and thus increase the failure rate.
#resilience4j.circuitbreaker.configs.default.recordExceptions=org.springframework.web.client.HttpServerErrorException,java.util.concurrent.TimeoutException,java.io.IOException
#resilience4j.circuitbreaker.configs.default.ignoreExceptions=java.lang.ArithmeticException
#resilience4j.circuitbreaker.configs.shared.slidingWindowSize=100
#resilience4j.circuitbreaker.configs.shared.permittedNumberOfCallsInHalfOpenState=30
#resilience4j.circuitbreaker.configs.shared.waitDurationInOpenState=1s
#resilience4j.circuitbreaker.configs.shared.failureRateThreshold=50
#resilience4j.circuitbreaker.configs.shared.eventConsumerBufferSize=10
#resilience4j.circuitbreaker.configs.shared.ignoreExceptions=java.lang.ArithmeticException

#resilience4j.circuitbreaker.instances.CircuitBreakerInstance.baseConfig=default
#resilience4j.circuitbreaker.instances.CircuitBreakerInstance.baseConfig=default

#Resilence4j rate limiter configuration
resilience4j.ratelimiter.instances.RateLimitingInstance.registerHealthIndicator=true
#10 per 5 seconds (requests per second). The limitForPeriod and limitRefreshPeriod configurations together determine the rate
resilience4j.ratelimiter.instances.RateLimitingInstance.limitForPeriod=10
resilience4j.ratelimiter.instances.RateLimitingInstance.limitRefreshPeriod=5s
#The timeoutDuration configuration specifies the time we are willing to wait to acquire permission from the RateLimiter before erroring out.
resilience4j.ratelimiter.instances.RateLimitingInstance.timeoutDuration=0
resilience4j.ratelimiter.instances.RateLimitingInstance.eventConsumerBufferSize=100
resilience4j.ratelimiter.instances.RateLimitingInstance.maxWaitDuration=10ms
#resilence4j buck head
resilience4j.bulkhead.instances.BulkheadInstance.maxConcurrentCalls=10
resilience4j.bulkhead.instances.BulkheadInstance.maxWaitDuration=10ms


#sumit@Sumits-MacBook-Pro ~ % watch -n 0.1 curl http://localhost:8762/user-management-service/circuit-breaker


#sumit@Sumits-MacBook-Pro ~ % brew install homebrew/cask/docker